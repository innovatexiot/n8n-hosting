version: "3.9"

services:
  traefik:
    image: traefik:v3.5
    command:
      - "--configFile=/etc/traefik/traefik.yml"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/dokploy/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:8081"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "8083:8080"     # Traefik dashboard (si lo usas)
      - "8443:8443"
      - "8443:8443/udp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/dokploy/traefik/dynamic
    networks:
      - dokploy-network
    restart: unless-stopped

  # Nuevo: Redis dentro del mismo stack de Dokploy
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - dokploy_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks:
      - dokploy-network
    restart: unless-stopped

  dokploy:
    image: dokploy/dokploy:latest
    env_file:
      - .env
    environment:
      - PORT=3000

      # URL pública del panel
      - DOKPLOY_URL=https://dokploy.innovatexiot.com
      - APP_URL=https://dokploy.innovatexiot.com
      - BASE_URL=https://dokploy.innovatexiot.com

      # Postgres externo (usa tus variables del .env)
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=${DB_SSLMODE}

      # Redis interno del stack
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # (si tu versión admite URL, alternativamente)
      # - REDIS_URL=redis://redis:6379

      # Puertos “lógicos” para Traefik si Dokploy los requiere
      - TRAEFIK_PORT=80
      - TRAEFIK_SSL_PORT=443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/etc/dokploy
      - docker_config:/root/.docker
    ports:
      - "3000:3000"   # panel Dokploy
    depends_on:
      traefik:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - dokploy-network
    restart: unless-stopped

networks:
  dokploy-network:
    driver: bridge   # red local bridge creada por este compose

volumes:
  docker_config: {}
  dokploy_redis_data: {}
